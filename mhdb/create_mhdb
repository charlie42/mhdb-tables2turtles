#!/usr/bin/env python
"""
This program converts specific mental health spreadsheet workbooks to RDF
text documents. See header_comment below for more information.

The database is licensed under the terms of the Creative Commons BY license.
Current information can be found on the website, https://matter.childmind.org.

Authors:
    - Arno Klein, 2017-2020 (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017â€“2018 (jon.clucas@childmind.org)

Copyright 2020, Child Mind Institute MATTER Lab (https://matter.childmind.org),
Apache v2.0 License

"""

header_comment = """
The Mental Health Database (mhdb) includes the following modules:

  - mhdb-states: Mental states
  - mhdb-disorders: Mental health disorders
  - mhdb-resources: Mental health resources
  - mhdb-assessments: Mental health assessments
  - mhdb-measures: Physical measures and sensors

License: Creative Commons Attribution 4.0 International (CC BY): 
License link: https://creativecommons.org/licenses/by/4.0/
Created by: Arno Klein (arno@childmind.org)
Developers: MATTER Lab (https://matter.childmind.org), Child Mind Institute, NY 
Updated: March 9, 2020

Current information about its content, contributors, and changes 
can be found on the website: https://github.com/ChildMindInstitute/mhdb
"""
states_title = "mhdb-states: Mental states (categories of mental phenomena)"
disorders_title = "mhdb-disorders: Mental health disorders, signs, and symptoms"
resources_title = "mhdb-resources: Mental health resources (guides, therapies, and projects)"
assessments_title = "mhdb-assessments: Mental health assessments (questions and cognitive tasks)"
measures_title = "mhdb-measures: Physical measures and sensors"
chills_title = "chillsdb"
ddashes = "================================================================================"

header_states="\n\n{0}\n\t\t{1}\n{0}\n{2}\n{0}\n".format(
    ddashes, states_title, header_comment)
header_disorders="\n\n{0}\n\t\t{1}\n{0}\n{2}\n{0}\n".format(
    ddashes, disorders_title, header_comment)
header_resources="\n\n{0}\n{1}\n{0}\n{2}\n{0}\n".format(
    ddashes, resources_title, header_comment)
header_assessments="\n\n{0}\n{1}\n{0}\n{2}\n{0}\n".format(
    ddashes, assessments_title, header_comment)
header_measures="\n\n{0}\n\t\t{1}\n{0}\n{2}\n{0}\n".format(
    ddashes, measures_title, header_comment)
header_chills="\n\n{0}\n\t\t{1}\n{0}\n".format(
    ddashes, chills_title)

import os
import sys
sys.path
print(sys.path)
mhdb_path = os.path.abspath(os.getcwd())
if mhdb_path not in sys.path:
    sys.path= [
        mhdb_path,
        *sys.path
    ]
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
try:
    from mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.ingest import *
    from mhdb.write_ttl import check_iri, turtle_from_dict, write_header
except:
    from mhdb.mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.mhdb.ingest import *
    from mhdb.mhdb.write_ttl import check_iri, turtle_from_dict, write_header
import numpy as np
import pandas as pd

run_all = 0
only_chills = 1
if run_all:
    do_states = 1
    do_disorders = 1
    do_resources = 1
    do_assessments = 1
    do_measures = 1
    do_chills = 1
elif only_chills:
    do_states = 0
    do_disorders = 0
    do_resources = 0
    do_assessments = 0
    do_measures = 0
    do_chills = 1
else:
    do_states = 0
    do_disorders = 0
    do_resources = 0
    do_assessments = 0
    do_measures = 1
    do_chills = 0


def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    # try:
    #     statesFILE = download_google_sheet(
    #         '../input/mhdb-states.xlsx',
    #         "11OkIWLwZYi9xkpuFODAKXQZHEFeMvYCQ8BTfIBKm0Z8"
    #     )
    # except:
    #     statesFILE = '../input/mhdb-states.xlsx'
    try:
        disordersFILE = download_google_sheet(
            '../input/mhdb-disorders.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        disordersFILE = '../input/disorders.xlsx'
    try:
        resourcesFILE = download_google_sheet(
            '../input/mhdb-resources.xlsx',
            "1LeLlrsvBWMYTTIXTVtkynmBzzb0Uzi1OwpRLfyRAwzM"
        )
    except:
        resourcesFILE = '../input/mhdb-resources.xlsx'
    try:
        assessmentsFILE = download_google_sheet(
            '../input/mhdb-assessments.xlsx',
            "1VUf3XnieYThY8OA6JWtpNP4zI2xa9xak9LXuyH_PaoE"
        )
    except:
        assessmentsFILE = '../input/mhdb-assessments.xlsx'
    try:
        measuresFILE = download_google_sheet(
            '../input/mhdb-measures.xlsx',
            "1ELaw79zmtmjmrg3J7slyoP-HXdfQRWa1Aqnbp50cmj8"
        )
    except:
        measuresFILE = '../input/mhdb-measures.xlsx'
    try:
        chillsFILE = download_google_sheet(
            '../input/chills.xlsx',
            "1J7lJAV4uYcfOVXAI8vRfSFqWh4QPcNo4WRH1BPHi1E0"
        )
    except:
        chillsFILE = '../input/chills.xlsx'


    # --------------------------------------------------------------------------
    # Import spreadsheets
    # --------------------------------------------------------------------------
    # states_xls = pd.ExcelFile(statesFILE)
    states_outfile = os.path.join('../output', 'mhdb-states.ttl')
    disorders_xls = pd.ExcelFile(disordersFILE)
    disorders_outfile = os.path.join('../output', 'mhdb-disorders.ttl')
    resources_xls = pd.ExcelFile(resourcesFILE)
    resources_outfile = os.path.join('../output', 'mhdb-resources.ttl')
    assessments_xls = pd.ExcelFile(assessmentsFILE)
    assessments_outfile = os.path.join('../output', 'mhdb-assessments.ttl')
    measures_xls = pd.ExcelFile(measuresFILE)
    measures_outfile = os.path.join('../output', 'mhdb-measures.ttl')
    chills_xls = pd.ExcelFile(chillsFILE)
    chills_outfile = os.path.join('../output', 'chills.ttl')


    # --------------------------------------------------------------------------
    # Create output RDF
    # --------------------------------------------------------------------------
    if do_states:
        states_statements = ingest_states(states_xls, statements={})
        states_turtle = turtle_from_dict(states_statements)
    else:
        states_statements = []
        states_turtle = []

    if do_disorders:
        disorders_statements = ingest_disorders(disorders_xls, statements={})
        disorders_turtle = turtle_from_dict(disorders_statements)
    else:
        disorders_statements = []
        disorders_turtle = []

    if do_resources:
        resources_statements = ingest_resources(resources_xls,
                                              states_xls, measures_xls,
                                              statements={})
        resources_turtle = turtle_from_dict(resources_statements)
    else:
        resources_statements = []
        resources_turtle = []

    if do_assessments:
        assessments_statements = ingest_assessments(assessments_xls,
            resources_xls, statements={})
        assessments_turtle = turtle_from_dict(assessments_statements)
    else:
        assessments_statements = []
        assessments_turtle = []

    if do_measures:
        measures_statements = ingest_measures(measures_xls, statements={})
        measures_turtle = turtle_from_dict(measures_statements)
    else:
        measures_statements = []
        measures_turtle = []

    if do_chills:
        chills_statements = ingest_chills(chills_xls, statements={})
        chills_turtle = turtle_from_dict(chills_statements)
    else:
        chills_statements = []
        chills_turtle = []

    # --------------------------------------------------------------------------
    # Write header and statements to turtle files
    # --------------------------------------------------------------------------
    base_uri = "http://www.purl.org/mentalhealth"
    #base_uri = "http://examples.ontotext.com/family"
    X = ['', 'nan', np.nan, 'None', None, []]

    outputs_list = [
                    [states_statements, states_outfile, states_turtle],
                    [disorders_statements, disorders_outfile, disorders_turtle],
                    [resources_statements, resources_outfile, resources_turtle],
                    [assessments_statements, assessments_outfile, assessments_turtle],
                    [measures_statements, measures_outfile, measures_turtle],
                    [chills_statements, chills_outfile, chills_turtle]]

    for ioutput, output_list in enumerate(outputs_list):

        out_statements = output_list[0]
        out_file = output_list[1]
        out_turtle = output_list[2]

        if out_statements not in X:

            # Create header with ontologies
            import_prefixes = set()
            for subject in out_statements:
                if ":" in subject and \
                "://" not in subject and \
                not subject.startswith('"'):
                    import_prefixes.add(subject.split(":")[0])
                for predicate in out_statements[subject]:
                    if ":" in predicate and \
                    "://" not in predicate and \
                    not predicate.startswith('"'):
                        import_prefixes.add(predicate.split(":")[0])
                    for object in out_statements[subject][predicate]:
                        if ":" in object and \
                        "://" not in object and \
                        not object.startswith('"'):
                            import_prefixes.add(object.split(":")[0])

            header_string = ""
            if ioutput == 0:
                module = "mhdb-states"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["mhdb-disorders",
                                                         "mhdb-resources",
                                                         "mhdb-assessments",
                                                         "mhdb-measures"
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_states,
                    prefixes=prefixes
                )
            if ioutput == 1:
                module = "mhdb-disorders"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["mhdb-states",
                                                         "mhdb-resources",
                                                         "mhdb-assessments",
                                                         "mhdb-measures"
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_disorders,
                    prefixes=prefixes
                )
            if ioutput == 2:
                module = "mhdb-resources"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["mhdb-states",
                                                         "mhdb-disorders",
                                                         "mhdb-assessments",
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_resources,
                    prefixes=prefixes
                )
            if ioutput == 3:
                module = "mhdb-assessments"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["mhdb-states",
                                                         "mhdb-disorders",
                                                         "mhdb-measures"
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_assessments,
                    prefixes=prefixes
                )
            if ioutput == 4:
                module = "mhdb-measures"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["mhdb-states",
                                                         "mhdb-disorders",
                                                         "mhdb-resources",
                                                         "mhdb-assessments"
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_measures,
                    prefixes=prefixes
                )
            if ioutput == 5:
                module = "chills"
                prefixes = [(
                    row[1]["Prefix"],
                    row[1]["PrefixURI"],
                    row[1]["ImportURI"]
                ) for row in resources_xls.parse(
                    'ontologies'
                ).iterrows() if row[1]["Prefix"] in import_prefixes and
                                row[1]["Prefix"] not in ["chills"
                                                         ]]
                header_string = write_header(
                    "{0}/{1}".format(base_uri, module),
                    module,
                    version,
                    module,
                    header_chills,
                    prefixes=prefixes
                )
            
            fid = open(out_file, 'w')
            fid.write("PREFIX owl: <http://www.w3.org/2002/07/owl#> \n")
            fid.write("PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n")
            fid.write("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n")
            fid.write("PREFIX xsd: <https://www.w3.org/2009/XMLSchema/XMLSchema#> \n")
            fid.write(header_string)
            fid.write(out_turtle)


if __name__ == "__main__":
    main()
